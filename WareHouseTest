package hw3_code;

public class WareHouseTest {

		public static void main(String[] args) {
//			testAddItem();
//			testAddItem_Multiple();
//			testGetItem_WithIndex();
//    		testGetItem_WithName();
//			testGetAverageTemp();
//			testGetRefrigeratedItems();
//			testGetTotalCost();
//			testGetTotalCostRefrigerated();
//			testRemoveItem_WithIndex();
//			testRemoveItem_WithName();
			testToString();
		}
		
		/**
		 * Add one item and check the number of items to verify.
		 */
		public static void testAddItem() {
			System.out.println("-->testAddItem"); 
			WareHouse w = new WareHouse();
			Item v = new Item("Granola Bar",2.0);
			w.addItem(v);
			System.out.println("Expected: Number of items: 1"); 
			System.out.println("Actual: Number of items: " + w.getNumItems());
			
		}
		
		/**
		 * Add three items and check the number of items to verify. At least one should be a refrigerated item.
		 */
		public static void testAddItem_Multiple() {
			System.out.println("-->testAddItem_Multiple");
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
		   System.out.println("Expected: Number of Items: 3"); 
		   System.out.println("Actual:, Number of Items: " + w.getNumItems()); 

		}
		
		/**b
		 * Add three items and retrieve the one at index 1.
		 */
		public static void testGetItem_WithIndex() {
			System.out.println("-->testGetItem_WithIndex"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			
			System.out.println("Expected: Item at index 1: Bread"); 
			System.out.println("Actual: Item at index 1: " + w.getItem(1).getName());
		}

		/**
		 * Add three items and try to find one with a name that exists.
		 */
		public static void testGetItem_WithName() {
			System.out.println("-->testGetItem_WithName"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			System.out.println("Expected: Match=Bread");
			System.out.println("Actual: Match="+ w.getItem("Bread")); 
		}

		/**
		 * Add 5 items, 3 of which are refrigerated. Verify the average temperature.
		 */
		public static void testGetAverageTemp() {
			System.out.println("-->testGetAverageTemp"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.println("Expected: Avg = 22.00");
			String actual = String.format("Actual: Avg = %.2f", w.getAverageTemp()); 
			System.out.println(actual);	
		}
		
		/**
		 * Add 5 items, 3 of which are refrigerated. Verify that the 3 are returned in array.
		 */
		public static void testGetRefrigeratedItems() {
			System.out.println("-->testGetRefrigeratedItems"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			RefrigeratedItem[] rF = w.getRefrigeratedArray(w.items);
			System.out.println("Expected: Refrigerated items = 3" );
			System.out.println("Actual: Refrigerated items = " + rF.length);
			 
		}
		
		/**
		 * Add 5 items, 3 of which are refrigerated. Verify the total cost.
		 */
		public static void testGetTotalCost() {
			System.out.println("-->testGetTotalCost"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.println("Expected: 62.6");
			System.out.println("Actual:" + w.totalCost());
			 
		}

		/**
		 * Add 5 items, 3 of which are refrigerated. Verify the total cost of the 3 refrigerated items
		 */
		public static void testGetTotalCostRefrigerated() {
			System.out.println("-->testGetTotalCostRefrigerated"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.println("Expected: $50.00 ");
			String actual = String.format("Actual: $%.2f" ,w.totalRefrigeratedCost());
			System.out.println(actual);
		}

		/**
		 * Add 5 items, 3 of which are refrigerated. Remove the one at position 2 and 
		 * verify: the item is returned, and the number of items is decremented.
		 */
		public static void testRemoveItem_WithIndex() {
			System.out.println("-->testRemoveItem_WithIndex"); 
			
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
//			Item c = new Item("Waffles",2.0);
//			RefrigeratedItem coldWaffle = new RefrigeratedItem(c,10.0);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.println("Expected: name=Ice Cream, cost=$12.80, weight=2.70, temp=26.00 degrees, 4 items");
			System.out.print("Actual:" + w.removeItem(3));
			System.out.println(", " +w.getNumItems() + " items");
			
		}

		/**
		 * Add 5 items, 3 of which are refrigerated. Remove one with a name that exists and 
		 * verify: the item is returned, and the number of items is decremented.
		 */
		public static void testRemoveItem_WithName() {
			System.out.println("-->testRemoveItem_WithName"); 
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
//			Item c = new Item("Waffles",2.0);
//			RefrigeratedItem coldWaffle = new RefrigeratedItem(c,10.0);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.println("Expected: Returned Item: name=Bread, cost=$8.60, weight=4.30, 4 items");
			System.out.print("Actual: Returned Items: " + w.removeItemName("Bread"));
			System.out.println(", " + w.getNumItems() + " items");
		
			
		}

		/**
		 * Verify that the toString method produces a string exactly
		 * as specified in the assignment document. 
		 */
		public static void testToString() {
			System.out.println("-->testToString");
			WareHouse w = new WareHouse();
			Item a = new Item("Granola Bar",2.0);
			Item b = new Item("Bread",4.3);
			Item c = new RefrigeratedItem("Waffles",5.4,20.00);
			Item d = new RefrigeratedItem("Ice Cream", 2.7, 26.00);
			Item e = new RefrigeratedItem("Pizza",5.2,20.00);
			w.addItem(a);
			w.addItem(b);
			w.addItem(c);
			w.addItem(d);
			w.addItem(e);
			System.out.print(w);
				}

	}

	
	
	


