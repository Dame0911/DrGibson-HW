package hw3_code;

public class RefigeratedItemTest {

		public static void main(String[] args) {
			testConstructorMain();
			testConstructorAcceptsItem();
			testItemCost();
			testToString();
		}
		
		/**
		 * Verify that the name, weight, & temp are initialized with the main constructor.
		 */
		public static void testConstructorMain() {
			System.out.println("-->testConstructorMain"); 
			Item d = new RefrigeratedItem("Ice Cream", 1.00,20.00);
			String actual = String.format("Item:%s, Weight:%.2f",d.getName(),d.getWeight());
			System.out.println("Expected Output: Item:Ice Cream, Weight:1.00");
			System.out.println("Actual Output: " + actual); 
			
			
		}

		/**
		 * Verify that the name, weight, & temp are initialized with the second constructor.
		 */
		public static void testConstructorAcceptsItem() {
			System.out.println("-->testConstructorAcceptsItem"); 
			RefrigeratedItem d = new RefrigeratedItem("Ice Cream", 1.00, 20.00);
			String actual = String.format("Item:%s, Weight:%.2f, Temperature:%.2f degrees",d.getName(),d.getWeight(),d.getTemp());
			System.out.println("Expected Output: Item:Ice Cream, Weight:1.00, Temperature:20.00 degrees");
			System.out.println("Actual Output: " + actual); 
		}

		/**
		 * Verify that the cost method works correctly.
		 */
		public static void testItemCost() {
			System.out.println("-->testItemCost"); 
			RefrigeratedItem d = new RefrigeratedItem("Ice Cream", 1.00, 20.00);
			System.out.println("Expected Output: Item Cost: $10.00"); 
			String actual = String.format("Actual Output: Item Cost: $%.2f", d.cost());
			System.out.println(actual); 

			
		}

		/**
		 * Verify that the toString method produces a string exactly
		 * as specified in the assignment document. 
		 */
		public static void testToString() {
			System.out.println("-->testToString");
			RefrigeratedItem d = new RefrigeratedItem("Ice Cream", 1.00, 20.00);
			System.out.println("Expected Output: name=Ice Cream, cost=$10.00, weight=1.00, temp=20.00 degrees"); 
			System.out.print("Actual Output: " + d);
		}

	}

package prob2;
import java.util.ArrayList;

public class MartianManager {
	protected ArrayList<Martian>martians = new ArrayList<>();
	protected ArrayList<Teleporter>teleporters = new ArrayList<>();
	
	public MartianManager() {
	}
	
	public boolean addMartian(Martian m) {
		if(!martians.contains(m)) {
			martians.add(m);
			if(m instanceof GreenMartian) {
				Teleporter mt = (Teleporter)m;
				teleporters.add(mt);
			}
			return true;
		}
		else {
			return false;
		}
	}
	
	
	public int power(Martian m) {
		int power = 0;
		if(m instanceof GreenMartian){
			GreenMartian mg = (GreenMartian)m;
			power = mg.getVolume();
			return power;
	}
		else {
			RedMartian mg = (RedMartian)m;
			power = mg.getVolume() + mg.tenacity;
			return power;	
		}
	}
	public ArrayList<Martian> battle(ArrayList<Martian> invaders){
		ArrayList<Martian>fallen = new ArrayList<>();
		
		for(int i = 0; i < invaders.size();i++) {
			for(int j = 0; j < martians.size(); j++) {
				if(power(invaders.get(i)) > power(martians.get(j))){
					fallen.add(martians.get(j));
					martians.remove(j);	
					break;
			
				}
				
			}
			
			
//			if(invaders.get(i) instanceof GreenMartian){
//				GreenMartian g = (GreenMartian)invaders.get(i);
//				power1 = g.volume;
//				
//				if(martians.get(i) instanceof GreenMartian) {
//					GreenMartian j = (GreenMartian)martians.get(i);
//					power2 = j.volume;
//				}
//				else if(martians.get(i) instanceof RedMartian) {
//					RedMartian j = (RedMartian)martians.get(i);
//					power2 = j.volume + j.tenacity;
//				}	
//			}
//			else if(invaders.get(i) instanceof RedMartian){
//				RedMartian r = (RedMartian)invaders.get(i);
//				power1 = r.volume + r.tenacity;
//				
//				if(martians.get(i) instanceof GreenMartian) {
//					GreenMartian j = (GreenMartian)martians.get(i);
//					power2 = j.volume;
//				}
//				else if(martians.get(i) instanceof RedMartian) {
//					RedMartian j = (RedMartian)martians.get(i);
//					power2 = j.volume + j.tenacity;
//				}	
//			}
//			if(power1 > power2) {
//				fallen.add(martians.get(i));
//				martians.remove(i);
//				break;
//			}
//			
		}
		return fallen;
	}
	
	
	public static void main(String[]args) {
		MartianManager man = new MartianManager();
		GreenMartian a = new GreenMartian(1,1);
		GreenMartian b = new GreenMartian(1,1);
		GreenMartian c = new GreenMartian(1,1);
		GreenMartian d = new GreenMartian(1,1);
		
		man.addMartian(a);
		man.addMartian(b);
		man.addMartian(c);
		man.addMartian(d);
		
		GreenMartian e = new GreenMartian(1,2);
		GreenMartian f = new GreenMartian(1,1);
		GreenMartian g = new GreenMartian(1,2);
		GreenMartian h = new GreenMartian(1,1);
		
		ArrayList<Martian>mars = new ArrayList<>();
		mars.add(e);
		mars.add(f);
		mars.add(g);
		mars.add(h);
		
		System.out.println(man.battle(mars));
		
		
		
		
		
	}
	
	

}

	
	

